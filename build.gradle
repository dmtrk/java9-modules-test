plugins {
    id 'java'
    id 'idea'
    id "com.github.johnrengelman.shadow" version "2.0.1"
    id 'pl.allegro.tech.build.axion-release' version '1.8.1'
}

repositories {
    mavenLocal()
    mavenCentral()
}

scmVersion {
    useHighestVersion = true
    tag.prefix = 'release'
    tag.initialVersion = {config, position -> '1.0.0'}
    checks.snapshotDependencies = false
    checks.aheadOfRemote = false
    versionCreator 'versionWithBranch'
    hooks {
        pre {context -> if(!"master".equalsIgnoreCase(context.position.branch)){
            throw new Exception("Refuse to release on '"+context.position.branch+"' branch, 'release' task is only allowed on 'master' branch")
        }}
    }
}
group = 'com.traiana'
version = scmVersion.version.replaceAll("-develop","-SNAPSHOT").replaceAll("-SNAPSHOT-SNAPSHOT","-SNAPSHOT")
println "branch: '"+scmVersion.getScmPosition().branch+"', version: '"+version+"'"

dependencies {
    // compileOnly - will NOT be included in uber jar
    //compileOnly 'org.slf4j:slf4j-api:1.7.25'

    // compile - will be included in uber jar
    compile 'ch.qos.logback:logback-classic:1.2.3'

    // test
    testCompile 'junit:junit:4.12'
    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile 'org.databene:contiperf:2.3.4'
}

sourceCompatibility = 1.9


compileJava {
    inputs.property("moduleName", 'java_nine.test')
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
        ]
        classpath = files()
    }
}

jar {
    manifest {
        attributes(
                'Build-Time': new Date(),
                'Implementation-Title': project.name,
                'Implementation-Version': version,
                'Main-Class': 'java_nine.test.Main',
        )
    }
}

/*shadowJar {
    configurations = [project.configurations.compile]
    classifier = null
}*/

artifacts {
    archives jar
}

task copyToLib(type: Copy) {
    into "$buildDir/libs"
    from configurations.runtime
}


//task copyMainResourcesToTest(type: Copy) {
    //from sourceSets.main.output.resourcesDir into sourceSets.test.output.classesDir
//}

test {
    //dependsOn 'copyMainResourcesToTest'
    exclude 'test/perf/**'
}

idea.module {
    inheritOutputDirs = false
    outputDir = sourceSets.main.output.classesDir
    testOutputDir = sourceSets.test.output.classesDir
}
